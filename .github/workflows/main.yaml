name: Train Deployment

on:
  workflow_dispatch:
    inputs:
      train:
        description: 'Select the deployment train'
        required: true
        default: default
        type: choice
        options:
          - default
          - Sandbox01
          - Sandbox02
          - small_env

jobs:
  prepare:
    name: Prepare Environments List
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.get-envs.outputs.environments }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read Trains JSON
        id: get-envs
        shell: bash
        run: |
          echo "Selected train: ${{ github.event.inputs.train }}"
          cat trains.json
          envs=$(jq -c --arg TRAIN "${{ github.event.inputs.train }}" '.[$TRAIN]' trains.json)
          echo "Environments for ${{ github.event.inputs.train }}: $envs"
          echo "::set-output name=environments::$envs"

  deploy_sandbox01:
    name: Deploy to Sandbox01
    needs: prepare
    runs-on: ubuntu-latest
    if: contains(needs.prepare.outputs.environments, 'sandbox01')
    steps:
      - name: Deploy to Sandbox01
        run: echo "Deploying to Sandbox01 environment"

  deploy_sandbox02:
    name: Deploy to Sandbox02
    needs: [prepare, deploy_sandbox01]
    runs-on: ubuntu-latest
    if: >
      contains(needs.prepare.outputs.environments, 'sandbox02') &&
      ( !contains(needs.prepare.outputs.environments, 'sandbox01') || needs.deploy_sandbox01.result == 'success' )
    steps:
      - name: Deploy to Sandbox02
        run: echo "Deploying to Sandbox02 environment"

  deploy_dev:
    name: Deploy to Dev
    needs: [prepare, deploy_sandbox01, deploy_sandbox02]
    runs-on: ubuntu-latest
    if: >
      contains(needs.prepare.outputs.environments, 'dev') &&
      ( 
        ( contains(needs.prepare.outputs.environments, 'sandbox02') && needs.deploy_sandbox02.result == 'success' ) ||
        ( contains(needs.prepare.outputs.environments, 'sandbox01') && needs.deploy_sandbox01.result == 'success' ) ||
        ( !contains(needs.prepare.outputs.environments, 'sandbox01') && !contains(needs.prepare.outputs.environments, 'sandbox02') )
      )
    steps:
      - name: Deploy to Dev
        run: echo "Deploying to Dev environment"

  deploy_non_prod:
    name: Deploy to Non-Prod
    needs: [prepare, deploy_dev]
    runs-on: ubuntu-latest
    if: >
      contains(needs.prepare.outputs.environments, 'non-prod') &&
      ( !contains(needs.prepare.outputs.environments, 'dev') || needs.deploy_dev.result == 'success' )
    steps:
      - name: Deploy to Non-Prod
        run: echo "Deploying to Non-Prod environment"

  deploy_test:
    name: Deploy to Test
    needs: [prepare, deploy_non_prod]
    runs-on: ubuntu-latest
    if: >
      contains(needs.prepare.outputs.environments, 'test') &&
      ( !contains(needs.prepare.outputs.environments, 'non-prod') || needs.deploy_non_prod.result == 'success' )
    steps:
      - name: Deploy to Test
        run: echo "Deploying to Test environment"
