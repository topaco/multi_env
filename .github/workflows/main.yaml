name: Train Deployment

on:
  workflow_dispatch:
    inputs:
      train:
        description: 'Select the deployment train'
        required: true
        default: trainA
        type: choice
        options:
          - default
          - Sandbox01
          - Sandbox02
          - small_env

jobs:
  prepare:
    name: Prepare Environments List
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.get-envs.outputs.environments }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read Trains JSON
        id: get-envs
        shell: bash
        run: |
          echo "Selected train: ${{ github.event.inputs.train }}"
          envs=$(jq -c --arg TRAIN "${{ github.event.inputs.train }}" '.[$TRAIN]' trains.json)
          echo "Environments for ${{ github.event.inputs.train }}: $envs"
          echo "::set-output name=environments::$envs"

  deploy_dev:
    name: Deploy to Dev
    needs: prepare
    runs-on: ubuntu-latest
    if: contains(needs.prepare.outputs.environments, 'dev')
    steps:
      - name: Deploy to Dev
        run: echo "Deploying to Dev environment"

  deploy_test:
    name: Deploy to Test
    needs: [prepare, deploy_dev]
    runs-on: ubuntu-latest
    if: |
      contains(needs.prepare.outputs.environments, 'test') &&
      ( !contains(needs.prepare.outputs.environments, 'dev') || needs.deploy_dev.result == 'success' )
    steps:
      - name: Deploy to Test
        run: echo "Deploying to Test environment"

  deploy_staging:
    name: Deploy to Staging
    needs: [prepare, deploy_test]
    runs-on: ubuntu-latest
    if: |
      contains(needs.prepare.outputs.environments, 'staging') &&
      ( !contains(needs.prepare.outputs.environments, 'test') || needs.deploy_test.result == 'success' )
    steps:
      - name: Deploy to Staging
        run: echo "Deploying to Staging environment"

  deploy_prod:
    name: Deploy to Prod
    needs: [prepare, deploy_staging]
    runs-on: ubuntu-latest
    if: |
      contains(needs.prepare.outputs.environments, 'prod') &&
      ( !contains(needs.prepare.outputs.environments, 'staging') || needs.deploy_staging.result == 'success' )
    steps:
      - name: Deploy to Prod
        run: echo "Deploying to Prod environment"
